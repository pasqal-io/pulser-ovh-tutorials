{"timestamp": 1698744565.903217, "stored_source_code": "# add default values for parameters here\n# Quickstart: The Rydberg Blockade\nThe following walkthrough highlights some of Pulser's core features and uses them to display a crucial physical effect for neutral atom devices: the **Rydberg blockade**. Bear in mind that it is not meant to be a comprehensive step-by-step guide on how to use Pulser, but rather a showcase of Pulser in action. \n\nFor a more detailed introduction to Pulser, check the tutorials on [Pulse Sequence Creation](tutorials/creating.nblink) and [Simulation of Sequences](tutorials/simulating.nblink). To better understand neutral atom devices and how they serve as quantum computers and simulators, check the pages in [Quantum Computing with Neutral Atoms](review.rst).\n## Pulser's main features\nWith ``pulser``, it is easy to define a ``Register`` consisting of any arrangement of atoms in a quantum processor. For example, we can generate a register with hexagonal shape:\nfrom pulser import Register\nfrom pulser.devices import Chadoq2\n\nlayers = 3\nreg = Register.hexagon(layers)\nreg.draw(with_labels=False)\nIn fact, we can place the atoms in arbitrary positions by specifying the positions of each one. As an exotic example, here is a picture of the Gioconda as a register of neutral atoms made using Pulser:\n\n![download%20%282%29.png](attachment:download%20%282%29.png)\nIt is also simple to create and design a ``Pulse`` that will act on the atom array:\nimport numpy as np\n\nfrom pulser import Pulse\nfrom pulser.waveforms import RampWaveform, BlackmanWaveform\n\nduration = 1000  # Typical: ~1 \u00b5sec\npulse = Pulse(\n    BlackmanWaveform(duration, np.pi), RampWaveform(duration, -5.0, 10.0), 0\n)\npulse.draw()\nEach pulse acts on a set of atoms at a certain moment of time. The entire ``Sequence`` is stored by Pulser and can then be either simulated or sent to a real device. Below is the example of a sequence sending the same $\\pi$-pulse to two atoms, sequentially, using the same channel.\nfrom pulser import Sequence\n\nreg = Register.rectangle(1, 2, spacing=8, prefix=\"atom\")\nreg.draw()\n\npi_pulse = Pulse.ConstantDetuning(BlackmanWaveform(duration, np.pi), 0.0, 0.0)\n\nseq = Sequence(reg, Chadoq2)\n\nseq.declare_channel(\"ryd\", \"rydberg_local\", \"atom0\")\n\nseq.add(pi_pulse, \"ryd\")\nseq.target(\"atom1\", \"ryd\")\nseq.add(pi_pulse, \"ryd\")\n\nseq.draw()\n## Probing the Rydberg Blockade Mechanism\nRydberg atoms are a prominent architecture for exploring condensed matter physics and quantum information processing. For example, one can use Pulser to write a sequence of succesive $\\pi$-pulses on a two atom system, each one coupling the atom to its excited Rydberg state. This will allow us to study the *Rydberg Blockade* effect, using the dedicated ``pulser_simulation`` library:\n\nThe presence of the van der Waals interaction when both atoms are in the Rydberg state, prevents the collective ground state $|gg\\rangle$ to couple to $|rr\\rangle$, which is shifted out of resonance. \nThe Hamiltonian for the two-atom system can be written as:\n\n$$H = \\frac{\\hbar \\Omega_1(t)}{2} \\sigma_1^x + \\frac{\\hbar \\Omega_2(t)}{2} \\sigma_2^x + U n_1n_2 $$\nWe shall explore this blockade by changing the interatomic distance $R$:\nimport matplotlib.pyplot as plt\nfrom pulser_simulation import QutipEmulator\n\ndata = []\ndistances = np.linspace(6.5, 14, 7)\n\nr = [1, 0]  # |r>\nrr = np.kron(r, r)  # |rr>\noccup = [np.outer(rr, np.conj(rr))]  # |rr><rr|\n\nfor i, R in enumerate(distances):\n    # Atom Register and Device\n    reg = Register.rectangle(1, 2, spacing=R, prefix=\"atom\")\n\n    # Pulse Sequence\n    seq = Sequence(reg, Chadoq2)\n    seq.declare_channel(\"ryd\", \"rydberg_local\", \"atom0\")\n    seq.add(pi_pulse, \"ryd\")\n    seq.target(\"atom1\", \"ryd\")\n    seq.add(pi_pulse, \"ryd\")\n\n    sim = QutipEmulator.from_sequence(seq)\n\n    res = sim.run()  # Returns a SimulationResults instance\n    data.append(\n        res.expect(occup)[0]\n    )  # Get expectation value for the occupation operator\nprint(\"...Simulation Complete!\")\nWe plot the results\nfor i, R in enumerate(distances):\n    plt.plot(data[i], label=f\"R={R}\")\n    plt.xlabel(\"Time (ns)\", fontsize=14)\n    plt.ylabel(r\"Occupation of $|rr\\rangle$\", fontsize=14)\n    plt.legend()\nNotice how the occupation of $|rr\\rangle$ is suppressed for decreasing $R$. This means that, up until a certain distance between the two atoms (called the *Rydberg blockade radius*), the fact that `atom0` was first excited to the Rydberg state prevents `atom1` from being excited to the same state with the same pulse, i.e. `atom0` **blockades the excitation of** `atom1` to the Rydberg state.\n\nThis conditional excitation of one atom depending on the state of another closely resembles that of a controlled gate in a quantum circuit. In fact, for neutral atom devices, the **Rydberg blockade mechanism is the key behind entanglement generation between atoms**.\n\nYou can find many more details about Pulser, its features and the neutral atom device architecture in this documentation and in the Tutorials.", "params": {}}