{"timestamp": 1698744546.963937, "stored_source_code": "# add default values for parameters here\n# Devices and Virtual Devices\nimport numpy as np\nfrom dataclasses import replace\nfrom pulser.devices import Device, VirtualDevice, Chadoq2, MockDevice\nfrom pulser.channels import Rydberg, Raman, Microwave\nfrom pulser import Pulse, Sequence, Register\n## Physical devices\nTo perform any computation using Pulser, it is necessary to choose a device. For convenience, some examples of typical physical devices are included and can be accessed via `pulser.devices`.  \nThese devices are instances of the `Device` class. They are constrained by physical considerations and all their parameters are defined.\n\nAs an example, we present below the specifications of the physical device `Chadoq2`, which can be accessed via the `Device.print_specs()` method.\n# Display Chadoq2's specifications\nChadoq2.print_specs()\n## Virtual Devices\n### Converting a Device into a Virtual Device\nHowever, we sometimes want to perform the computations on a more permissive device, a device that would have more dimensions or more atoms for instance, or more types of channels. This can be done on an emulator behaving like a device. The `VirtualDevice` class is useful to define such an emulator, a virtual device.\n\nLet's start by configuring a virtual device having the same parameters as `Chadoq2`. To do this, we use the `Device.to_virtual()` method that creates a virtual device from a physical one. \n# Converting the Device object in a VirtualDevice object\nVirtualChadoq = Chadoq2.to_virtual()\nprint(VirtualChadoq)\n### Changing parameters of a virtual device with `dataclasses.replace()`\nAs proposed earlier, a virtual device gives us the possibility to modify the parameters of a physical device. The function `dataclasses.replace()` can be used to create a new `VirtualDevice` having some parameters changed.  \nFor example, simulations can be run on a virtual device having the same properties as `Chadoq2` but allowing working in 3 dimensions.\n# Adding a dimension to the emulator\nVirtualChadoq3D = replace(VirtualChadoq, dimensions=3)\nprint(VirtualChadoq3D)\n### Unrealistic parameters of a virtual device\nAmong the parameters defined in a `VirtualDevice`, some are called unrealistic as they do not refer to something physically implementable.  \nFor instance, it is possible to change the Rydberg level used in the simulation or to call a channel multiple times in the same sequence. Modifying the Rydberg level has an impact on the coefficient $C_6$ (see [here](https://github.com/pasqal-io/Pulser/blob/develop/pulser-core/pulser/devices/interaction_coefficients/C6_coeffs.json) for the correspondance between the Rydberg level and $C_6$ coefficient).\n# Changing the Rydberg level\nVirtualChadoq3D.change_rydberg_level(61)\nprint(VirtualChadoq3D)\n# Enable the multiple declaration of a channel in a sequence\nVirtualChadoq3D = replace(VirtualChadoq3D, reusable_channels=True)\n# Creating a square register\nreg = Register.square(4, spacing=5)  # 4x4 array with atoms 5 um apart\n# Building a sequence with the register and the virtual device\nseq = Sequence(reg, VirtualChadoq3D)\n# Declare twice the channel \"ram_loc\"\nseq.declare_channel(\"ch0\", \"raman_local\")\nseq.declare_channel(\"ch1\", \"raman_local\")\n# Show the declared channels\nprint(seq.declared_channels)\n### Building your own virtual device\nMore generally, the `VirtualDevice` class is more permissive than the `Device` class. In fact, some parameters can be left undefined and simpler devices can be built with a `VirtualDevice` instance. A virtual device only needs a `name`, a `dimension` and a `rydberg_level` to be initialized.\nBasicVirtualDevice = VirtualDevice(\n    name=\"BasicMockDevice\",\n    dimensions=2,\n    rydberg_level=61,\n)\nprint(BasicVirtualDevice)\n### Defining the channels of your device\nNevertheless, to perform computations, channels have to be defined. The channels enabled on the device are defined in `channel_objects`. Their IDs can be defined in `channel_ids`, but if no IDs are provided, they will be automatically generated as `{channeltype}_adressing`.  \nFor example, the `Rydberg.Global` channel is automatically named `rydberg_global` in the specifications of `Chadoq2`.\n# This basic device can be used for digital quantum computing\nDigitalQCVirtualDevice = replace(\n    BasicVirtualDevice,\n    channel_ids=(\n        \"ryd_loc\",\n        \"ram_loc\",\n    ),\n    channel_objects=(\n        Rydberg.Local(None, None, max_duration=None),\n        Raman.Local(None, None, max_duration=None),\n    ),\n)\nprint(DigitalQCVirtualDevice)\n### A built-in example of a virtual device: the `MockDevice`\nActually, there exists a virtual device having all the channels already implemented, with no constraints on the number of atoms, the distance between them. This virtual device is the `MockDevice`.\nMyMockDevice = replace(MockDevice, name=\"MyMockDevice\")\nprint(MyMockDevice)", "params": {}}