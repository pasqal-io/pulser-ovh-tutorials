{"timestamp": 1698744540.586293, "stored_source_code": "# add default values for parameters here\n# Composite Waveforms\nimport numpy as np\n\nfrom pulser import Pulse\nfrom pulser.waveforms import (\n    BlackmanWaveform,\n    RampWaveform,\n    CompositeWaveform,\n    ConstantWaveform,\n)\nWhen creating a `Sequence`, it's usually preferable to divide it into a stream of simple pulses. However, this is not always convenient, as the natural breaking point in the `amplitude` and `detuning` waveforms may not always match. \n\nIn these cases, the `CompositeWaveform` allows for the creation of a more complex waveform by concatenation of multiple, smaller waveforms. Here's an example of how to use it:\n# Defining simple waveforms\npi_pulse = BlackmanWaveform(1000, np.pi)  # Blackman pi-pulse of 1us\nup = RampWaveform(500, 0, 5)\ndown = RampWaveform(500, 5, 0)\n\n# Creating the CompositeWaveform\ncomp_wf = CompositeWaveform(pi_pulse, up, down)\ncomp_wf.draw()\n\n# All usual metrics are still availabe\nprint(\"Composite pulse duration: \", comp_wf.duration)\nprint(\"Composite pulse area: \", comp_wf.integral)\nSay that this waveform modulates the amplitude, but alongside it we would like a detuning in the form of a `RampWaveform`, going from $-10$ to $2$ rad/\u00b5s. Without the composite waveform, we would be forced to calculate the detuning values at $t=1000$ ns and $t=1500$ ns, in order to create three separate ramps. Instead, we can make a single ramp and use it to create a single pulse:\ndetuning_ramp = RampWaveform(comp_wf.duration, -10, 2)\n\npulse = Pulse(comp_wf, detuning_ramp, phase=0)\npulse.draw()", "params": {}}