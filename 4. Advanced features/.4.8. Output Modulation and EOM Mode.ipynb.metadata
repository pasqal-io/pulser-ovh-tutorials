{"timestamp": 1698744551.747127, "stored_source_code": "# add default values for parameters here\n# Output Modulation & EOM Mode\nimport numpy as np\n\nfrom pulser import Sequence, Register, Pulse\nfrom pulser.devices import VirtualDevice\nfrom pulser.channels import Rydberg, Raman\n## Output Modulation\n### Modulation Bandwidth\nWhen programming physical devices, you will likely come across the notion of *modulation bandwidth*. When a channel has a finite modulation bandwidth, its output (what actually comes out of the channel) is modulated when compared to its input (what is programmed in Pulser) because the component takes some amount of time to reach the desired value. \n\nTo illustrate this, let us start by creating a channel with a defined modulation bandwidth.\nrydberg_ch = Rydberg.Global(\n    max_abs_detuning=20 * 2 * np.pi,\n    max_amp=10 * 2 * np.pi,\n    mod_bandwidth=5,  # MHz\n)\nWith this channel object, we can check what the modulation of a waveform will look like. Let's take, for instance, a short square waveform:\nfrom pulser.waveforms import ConstantWaveform\n\nconstant_wf = ConstantWaveform(duration=100, value=1)\nconstant_wf.draw(output_channel=rydberg_ch)\nWe observe two things:\n    \n   1. The output is streched when compared with the input. This is always the case, and we refer to the time it takes the output to ramp up as the `rise time`. \n   2. The output does not have enough time to reach the maximum value set in the input. This happens only when the input pulse is too short.\n\nIf we make the pulse long enough, we will see that it will still be extended on both sides by the rise time, but now it reaches the maximum value:\nconstant_wf2 = ConstantWaveform(duration=300, value=1)\nconstant_wf2.draw(output_channel=rydberg_ch)\nNote also that all inputs are modulated, but the effect is most pronounced in square pulses. If we take, for example, a `BlackmanWaveform` of similar duration, we see the difference between input and output is more subtle (on the other hand, the output never gets a chance to reach the maximum value because the input is not held at the maximum value).\nfrom pulser.waveforms import BlackmanWaveform\n\nblackman_wf = BlackmanWaveform(300, 0.13)\nblackman_wf.draw(output_channel=rydberg_ch)\n### Influence in a Sequence\nWhen creating a sequence on a device whose channels have a finite modulation bandwitdh, its effects are manifested in multiple ways. Let us start by creating such a device and making a simple pulse sequence with it.\nraman_ch = Raman.Local(\n    max_abs_detuning=0,\n    max_amp=20 * 2 * np.pi,\n    fixed_retarget_t=50,\n    mod_bandwidth=4,\n)\n\ntest_device = VirtualDevice(\n    name=\"test_device\",\n    dimensions=2,\n    rydberg_level=60,\n    channel_objects=(rydberg_ch, raman_ch),\n)\nseq = Sequence(Register.square(2, prefix=\"q\"), test_device)\n\nseq.declare_channel(\"raman\", \"raman_local\", initial_target=\"q0\")\nseq.declare_channel(\"rydberg\", \"rydberg_global\")\n\nseq.add(Pulse.ConstantDetuning(blackman_wf, -5, 0), \"rydberg\")\n\nshort_pulse = Pulse.ConstantPulse(100, 1, 0, 0)\nseq.add(short_pulse, \"raman\")\nseq.target(\"q1\", \"raman\")\nseq.add(short_pulse, \"raman\")\nseq.delay(100, \"raman\")\nlong_pulse = Pulse.ConstantPulse(500, 1, 0, 0)\nseq.add(long_pulse, \"raman\")\n\nseq.add(Pulse.ConstantDetuning(blackman_wf, 5, np.pi), \"rydberg\")\n\nseq.draw(draw_phase_curve=True)\nBy default, `Sequence.draw()` will display both the programmed input and the modulated output. In this way, one can compare how the output will change with respect to the intended input.\n\nFrom looking at the output, there are multiple things to note:\n\n1. Not only the amplitude but also the detuning and phase are modulated, all with the same modulation bandwidth.\n2. Alignment between channels takes into account the extended duration of the pulses in the other channels. Note, for instance, how the last pulse on the `rydberg` channel starts only after the output of the `raman` channel goes to zero.\n3. Similarly, changing the target in a local channel will also wait for the output to ramp down before starting the retargeting.\n4. For consecutive pulses in the same channel, there is no automatically imposed delay between them to allow one pulse to finish before the next one starts. As such, whenever the interval between two pulses is too short, they will be \"merged\" together, as is illustrated in the `raman` channel.\n### Usage in Simulation\nIn order to get the most realistic results when simulating a sequence, it may be valuable to use the expected output rather than the programmed input. To do so, one can simply initialize the `QutipEmulator` class with `with_modulation=True`.\nBelow, we simulate the sequence with and without modulation to assess the effect it has on the overlap between the resulting final states.\nfrom pulser_simulation import QutipEmulator\n\nsim_in = QutipEmulator.from_sequence(seq)\nsim_out = QutipEmulator.from_sequence(seq, with_modulation=True)\n\ninput_final_state = sim_in.run().get_final_state()\noutput_final_state = sim_out.run().get_final_state()\n\nprint(\"Final state overlap:\", input_final_state.overlap(output_final_state))\n## EOM Mode Operation\nThe modulation bandwidth of a channel can impose significant limitations on how a pulse sequence is programmed. Perhaps most importantly, it can force the user to program longer pulses than would otherwise be required, resulting in longer sequences and consequently noisier results.\n\nTo overcome these limitations, a channel can be equipped with an EOM that allows the execution of square pulses with a higher modulation bandwidth. For now, EOM mode operation is reserved for `Rydberg` channels and works under very specific conditions:\n\n   1. EOM mode must be explicitly enabled (`Sequence.enable_eom_mode()`) and disabled (`Sequence.disable_eom_mode()`).\n   2. A buffering time is automatically added before the EOM mode is enabled and after it is disabled, as it needs to be isolated from regular channel operation. During the starting buffer, the detuning goes to the value it will assume between EOM pulses (_i.e._ during delays).\n   3. When enabling the EOM mode, one must choose the amplitude and detuning value that all square pulses will have. These values will also determine a set of options for the detuning during delays, out of which the best one is chosen. When this detuning value is not zero, the phase of each qubit's state will drift during delays. If desired, this phase drift can be corrected through the `correct_phase_drift` option, which will adjust the phase of subsequent pulses accordingly. \n   4. While in EOM mode, one can only add delays or pulses of variable duration (through `Sequence.add_eom_pulse()`) \u2013 changing the phase between pulses is also allowed, but the necessary buffer time for a phase jump will still be enforced.\nLet us showcase these features with the `AnalogDevice` device, which features an EOM on its `rydberg_global` channel.\nfrom pulser.devices import AnalogDevice\n\nseq = Sequence(Register.square(2, spacing=6), AnalogDevice)\nseq.declare_channel(\"rydberg\", \"rydberg_global\")\n\nseq.add(Pulse.ConstantPulse(100, 1, 0, 0), \"rydberg\")\nseq.enable_eom_mode(\"rydberg\", amp_on=1.0, detuning_on=0.0)\nseq.add_eom_pulse(\"rydberg\", duration=100, phase=0.0)\nseq.delay(300, \"rydberg\")\nseq.add_eom_pulse(\"rydberg\", duration=60, phase=0.0, correct_phase_drift=True)\nseq.disable_eom_mode(\"rydberg\")\nseq.add(Pulse.ConstantPulse(100, 1, 0, 0), \"rydberg\")\n\nseq.draw(draw_phase_curve=True)\nprint(seq)\nAs expected, inside the isolated EOM mode block in the middle we see that the pulses are much sharper, but we can only do square pulses with a fixed amplitude and there is some non-zero detuning in between them. \n\nWe also observe how the phase of the second EOM pulse changes to correct for the phase drift during the detuned delay (because we set `correct_phase_drift=True`).", "params": {}}